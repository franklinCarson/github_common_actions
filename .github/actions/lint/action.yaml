name: 'Lint'
description: 'Lints a GoLang project'
runs:
  using: 'composite'
  steps:
    - name: Check go mod doesn't have 'replace' directives or invalid semver tags
      shell: 'bash'
      run: |
        # Path to the go.mod file
        GO_MOD_FILE="go.mod"

        # Check for 'replace' directives
        if grep -q "^replace " "$GO_MOD_FILE"; then
            echo "Validation failed: 'replace' directive(s) found in $GO_MOD_FILE"
            exit 1
        else
            echo "No 'replace' directives found."
        fi

        # Function to check if the version is a valid semver
        function is_semver {
            local version=$1
            if [[ $version =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)(-[-0-9A-Za-z\.]+)?(\+[-0-9A-Za-z\.]+)?$ ]]; then
                return 0
            else
                return 1
            fi
        }

        # Check that all direct dependencies use semver tags
        in_require_block=false
        while read -r line; do
            if [[ $line =~ ^require\ +(.+) ]]; then
                # Parsing inside require block
                in_require_block=true
            elif [[ $in_require_block = true && $line =~ ^\)$ ]]; then
                # End of require block
                in_require_block=false
            elif [[ $in_require_block = true ]]; then
                # Extract the module and version
                if [[ $line =~ ^\ +(.+)\ +(.+)$ ]]; then
                    module="${BASH_REMATCH[1]}"
                    version="${BASH_REMATCH[2]}"
                    # Check each module version
                    if ! is_semver "$version"; then
                        echo "Validation failed: Dependency '$module $version' does not use a proper semver tag."
                        exit 1
                    fi
                fi
            fi
        done < "$GO_MOD_FILE"

        echo "All dependencies use proper semver tags."