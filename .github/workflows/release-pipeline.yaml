name: Release Pipeline

on:
  workflow_call:
    inputs:
      image-version:
        required: true
        type: string
      repo-name:
        required: true
        type: string
      environment:
        required: true
        type: string
jobs:
  # This job gets the repository name from the GITHUB_REPOSITORY environment
  # variable. It will be used in the subsequent steps.
  GetRepoName:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      SERVICE_NAME: ${{ steps.get_repo_name.outputs.REPO_NAME }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Get the repository name
        id: get_repo_name
        run: echo "REPO_NAME=${{ inputs.repo-name }}" >> $GITHUB_OUTPUT

  # This just gets the image version from the input and stores it in an output
  # variable. It's not strictly necessary, but it makes the workflow more
  # readable as it is more consistent with the other steps.
  GetImageVersion:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      IMAGE_VERSION: ${{ steps.get_version_tag.outputs.VERSION_TAG }}
    steps:
      - name: Get version tag
        id: get_version_tag
        run: echo "VERSION_TAG=${{ inputs.image-version }}" >> $GITHUB_OUTPUT

  # We check if the release is tagged as the latest release in the GitHub
  # metadata, because we only want to deploy the latest to the hosted
  # environments. If it is not the latest, we will skip the rest of the steps.
  CheckIfReleaseIsLatest:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs:
      - GetRepoName
      - GetImageVersion
    outputs:
      IS_LATEST: ${{ steps.check_latest.outputs.IS_LATEST }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Check if this is the latest release
        id: check_latest
        uses: franklinCarson/github_common_actions/.github/actions/is-release-latest@master
        with:
          github-token: ${{ secrets.CICD_GITHUB_TOKEN }}
          repo-name: ${{ github.repository }}
          release-tag: ${{ needs.GetImageVersion.outputs.IMAGE_VERSION }}

  CheckIfIsPreReleaseCandidate:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs:
      - GetRepoName
      - GetImageVersion
    outputs:
      IS_PRE_RELEASE_CANDIDATE: ${{ steps.check_pre_release_candidate.outputs.IS_PRE_RELEASE_CANDIDATE }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Check if this is a pre-release candidate
        id: check_pre_release_candidate
        uses: franklinCarson/github_common_actions/.github/actions/is-pre-release-candidate@master
        with:
          github-token: ${{ secrets.CICD_GITHUB_TOKEN }}
          release-tag: ${{ needs.GetImageVersion.outputs.IMAGE_VERSION }}
          repo-name: ${{ github.repository }}

  CheckForExistingImage:
    environment: ${{ inputs.environment }}
    needs:
      - GetRepoName
      - GetImageVersion
      - CheckIfReleaseIsLatest
      - CheckIfIsPreReleaseCandidate
    if: ${{ needs.CheckIfReleaseIsLatest.outputs.IS_LATEST == 'true' && needs.CheckIfIsPreReleaseCandidate.outputs.IS_PRE_RELEASE_CANDIDATE == 'false' }}
    runs-on: ubuntu-latest
    outputs:
      EXISTS: ${{ steps.image_exists.outputs.EXISTS }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Check if the image already exists
        id: image_exists
        uses: franklinCarson/github_common_actions/.github/actions/check-if-image-exists@master
        with:
          image-name: ${{ needs.GetRepoName.outputs.SERVICE_NAME }}
          image-version: ${{ needs.GetImageVersion.outputs.IMAGE_VERSION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-account-id: ${{ vars.AWS_ACCOUNT_ID }}
          aws-region: us-west-2

  # If the image already exists, just re-add the latest tag to it instead of
  # retesting, rebuilding, and re-pushing the image. This is necessary, so when
  # the helm install is performed it will pull the image we version we are
  # rolling back to instead of whatever is currently tagged as latest. This also
  # ensures when people use locally to install to latest, they are getting what
  # is actually running in production.
  ReTagImageAsLatest:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs:
      - GetImageVersion
      - GetRepoName
      - CheckForExistingImage
      - CheckIfReleaseIsLatest
      - CheckIfIsPreReleaseCandidate
    if: ${{ needs.CheckForExistingImage.outputs.EXISTS == 'true' && needs.CheckIfReleaseIsLatest.outputs.IS_LATEST == 'true'}}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Re-tag the image as latest if it already exists
        uses: franklinCarson/github_common_actions/.github/actions/re-tag-image-as-latest@master
        with:
          image-name: ${{ needs.GetRepoName.outputs.SERVICE_NAME }}
          image-version: ${{ needs.GetImageVersion.outputs.IMAGE_VERSION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-account-id: ${{ vars.AWS_ACCOUNT_ID }}
          aws-region: us-west-2

  Lint:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs:
      - CheckForExistingImage
      - CheckIfReleaseIsLatest
      - CheckIfIsPreReleaseCandidate
    if: ${{ needs.CheckForExistingImage.outputs.EXISTS == 'false' && needs.CheckIfReleaseIsLatest.outputs.IS_LATEST == 'true'}}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - uses: franklinCarson/github_common_actions/.github/actions/lint@master

  CacheGoDependencies:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs:
      - CheckForExistingImage
      - CheckIfReleaseIsLatest
      - CheckIfIsPreReleaseCandidate
    if: ${{ needs.CheckForExistingImage.outputs.EXISTS == 'false' && needs.CheckIfReleaseIsLatest.outputs.IS_LATEST == 'true' }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Cache Go dependencies
        uses: franklinCarson/github_common_actions/.github/actions/cache-go-dependencies@master
        with:
          ssh-private-key: ${{ secrets.CICD_GITHUB_SSH_KEY }}

  GoTest:
    environment: ${{ inputs.environment }}
    needs:
      - CacheGoDependencies
      - CheckForExistingImage
      - CheckIfReleaseIsLatest
      - CheckIfIsPreReleaseCandidate
    if: ${{ needs.CheckForExistingImage.outputs.EXISTS == 'false' && needs.CheckIfReleaseIsLatest.outputs.IS_LATEST == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Run tests
        uses: franklinCarson/github_common_actions/.github/actions/go-test@master

  BuildAndPublishImage:
    environment: ${{ inputs.environment }}
    needs:
      - Lint
      - CacheGoDependencies
      - GoTest
      - CheckForExistingImage
      - GetRepoName
      - GetImageVersion
      - CheckIfReleaseIsLatest
      - CheckIfIsPreReleaseCandidate
    if: ${{ needs.CheckForExistingImage.outputs.EXISTS == 'false' && needs.CheckIfReleaseIsLatest.outputs.IS_LATEST == 'true' && needs.CheckIfIsPreReleaseCandidate.outputs.IS_PRE_RELEASE_CANDIDATE == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Build and publish Docker image if it does not already exist
        uses: franklinCarson/github_common_actions/.github/actions/build-and-publish-docker-image@master
        with:
          image-name: ${{ needs.GetRepoName.outputs.SERVICE_NAME }}
          image-version: ${{ needs.GetImageVersion.outputs.IMAGE_VERSION }} # Use the release tag as the image version. This keeps the image version in sync with the release version.
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-account-id: ${{ vars.AWS_ACCOUNT_ID }}
          aws-region: us-west-2

  DeployToDev:
    environment: ${{ inputs.environment }}
    needs:
      - BuildAndPublishImage
      - ReTagImageAsLatest
      - GetRepoName
      - GetImageVersion
      - CheckIfReleaseIsLatest
      - CheckIfIsPreReleaseCandidate
    # Run even if the needs are skipped, but only if one the
    # BuildAndPublishImage or ReTagImageAsLatest steps succeeded. We still have
    # all the steps in the "needs", to give the step scope to access the outputs
    # of the steps.
    if: ${{ always() && needs.CheckIfReleaseIsLatest.outputs.IS_LATEST == 'true' && (needs.BuildAndPublishImage.result == 'success' || needs.ReTagImageAsLatest.result == 'success') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Deploy to Dev
        uses: franklinCarson/github_common_actions/.github/actions/deploy-to-env@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-account-id: ${{ vars.AWS_ACCOUNT_ID }}
          aws-region: us-west-2
          eks-cluster-name: spruce-dev-eks-cluster
          values-filename: values-dev.yaml
          namespace: dev
          service-name: ${{ needs.GetRepoName.outputs.SERVICE_NAME }}
          image-version: ${{ needs.GetImageVersion.outputs.IMAGE_VERSION }}

  # DeployToStage:
  #   needs:
  #     - BuildAndPublishImage
  #     - ReTagImageAsLatest
  #     - GetRepoName
  #     - GetImageVersion
  #     - CheckIfReleaseIsLatest
  #     - CheckIfIsPreReleaseCandidate
  #   # Run even if the needs are skipped, but only if one the
  #   # BuildAndPublishImage or ReTagImageAsLatest steps succeeded.
  #   if: ${{ always() && needs.CheckIfReleaseIsLatest.outputs.IS_LATEST == 'true' && needs.CheckIfIsPreReleaseCandidate.outputs.IS_PRE_RELEASE_CANDIDATE == 'false' && (needs.BuildAndPublishImage.result == 'success' || needs.ReTagImageAsLatest.result == 'success') }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v4
  #     - name: Deploy to Stage
  #       uses: franklinCarson/github_common_actions/.github/actions/deploy-to-env@master
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-account-id: ${{ secrets.AWS_ACCOUNT_ID }}
  #         aws-region: us-west-2
  #         eks-cluster-name: covr-dev-cluster-sebQAw
  #         values-filename: values-stage.yaml
  #         namespace: stage
  #         service-name: ${{ needs.GetRepoName.outputs.SERVICE_NAME }}
  #         image-version: ${{ needs.GetImageVersion.outputs.IMAGE_VERSION }}

  # DeployToProd:
  #   needs:
  #     - BuildAndPublishImage
  #     - ReTagImageAsLatest
  #     - GetRepoName
  #     - GetImageVersion
  #     - CheckIfReleaseIsLatest
  #     - CheckIfIsPreReleaseCandidate
  #   # Run even if the needs are skipped, but only if one the tag is not a
  #   # pre-release candidate and one either the BuildAndPublishImage or
  #   # ReTagImageAsLatest steps succeeded.
  #   if: ${{ always() && needs.CheckIfReleaseIsLatest.outputs.IS_LATEST == 'true' && needs.CheckIfIsPreReleaseCandidate.outputs.IS_PRE_RELEASE_CANDIDATE == 'false' && (needs.BuildAndPublishImage.result == 'success' || needs.ReTagImageAsLatest.result == 'success') }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v4
  #     - name: Deploy to Prod
  #       uses: franklinCarson/github_common_actions/.github/actions/deploy-to-env@master
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-account-id: ${{ secrets.AWS_ACCOUNT_ID }}
  #         aws-region: us-west-2
  #         eks-cluster-name: covr-prod-cluster-l9vy
  #         values-filename: values-prod.yaml
  #         namespace: prod
  #         service-name: ${{ needs.GetRepoName.outputs.SERVICE_NAME }}
  #         image-version: ${{ needs.GetImageVersion.outputs.IMAGE_VERSION }}